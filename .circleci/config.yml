version: 2.1
orbs:
  node: circleci/node@4.1.0
  aws-cli: circleci/aws-cli@1.3.1
jobs:
  build:
    docker:
      - image: "cimg/base:stable"
    steps:
      - node/install
      - checkout
      - aws-cli/setup
      - run:
          name: Install Elastic Beanstalk CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y python3-pip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
            pip3 install awsebcli --upgrade --user
      - run:
          name: Front-End Install
          command: |
            npm run frontend:install
      - run:
          name: Front-End Lint
          command: |
            npm run frontend:lint
      - run:
          name: Front-End Prettier
          command: |
            cd store/store-frontend && npm run prettier
      - run:
          name: Front-End Build
          command: |
            npm run frontend:build
      - run:
          name: Back-End Install
          command: |
            npm run backend:install
      - run:
          name: Back-End Lint
          command: |
            npm run backend:lint
      - run:
          name: Back-End Prettier
          command: |
            cd store/store-backend && npm run prettier
      - run:
          name: Back-End Build
          command: |
            npm run backend:build
      - run:
          name: Deploy Front-End
          command: |
            npm run frontend:deploy
      - run:
          name: Deploy Back-End
          command: |
            eb --version  # Überprüfen, ob EB CLI installiert ist
            npm run backend:deploy
  test_backend:
    docker:
      - image: node:18
      - image: postgres:13
        environment:
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_DB: dbtest
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: asds
    environment:
      DOCKERIZE_VERSION: v0.6.1
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-backend-{{ checksum "store/store-backend/package.json" }}
      - run:
          name: Install Dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
      - run:
          name: Warten auf die Datenbank
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Installiere db-migrate global
          command: npm install -g db-migrate
      - run:
          name: Backend-Tests
          command: cd store/store-backend && npm run test
          environment:
            DATABASE_URL: postgres://postgres:asds@localhost:5432/dbtest
workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test_backend
